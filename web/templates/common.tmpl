{{- /*
This file is Free Software under the Apache-2.0 License
without warranty, see README.md and LICENSE for details.

SPDX-License-Identifier: Apache-2.0

SPDX-FileCopyrightText: 2025 German Federal Office for Information Security (BSI) <https://www.bsi.bund.de>
Software-Engineering: 2025 Intevation GmbH <https://intevation.de>
*/ -}}
{{- define "header" -}}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  {{- $running   := eq .Meeting.Status (MeetingStatus "running") }}
  {{- if $running }}
    <meta http-equiv="Refresh" content="300">
  {{- end }}
  <link rel="stylesheet" href="/static/styles/simple.min.css">
  <link rel="stylesheet" href="/static/styles/styles.css">
  <title>OQC - OASIS Quorum Calculator</title>
</head>
<body>
  <header>
    {{ if .Session }}
    <nav>
      {{ if .User }}
        {{ if .User.IsAdmin }}
          <a href="/users?SESSIONID={{ .Session.ID }}">users &#x1F465;</a>
          <a href="/committees?SESSIONID={{ .Session.ID }}">committees &#x1F3DB;</a>
        {{ end }}
        {{ $chair  := .User.CountMemberships (Role "chair") }}
        {{ $member := .User.CountMemberships (Role "member") }}
        {{ if $chair }}
          <a href="/chair?SESSIONID={{ .Session.ID }}">chair &#x1F9FE; ({{ $chair }})</a>
        {{ end }}
        {{ if $member }}
          <a href="/member?SESSIONID={{ .Session.ID }}">member &#x1F465; ({{ $member }})</a>
        {{ end }}
        <a href="/user?SESSIONID={{ .Session.ID }}">me &#x1F464; (<strong>{{ .User.Nickname }}</strong>)</a>
      {{ end }}
      <a href="/logout?SESSIONID={{ .Session.ID }}">Logout &#x1F6AA;</a>
    </nav>
    {{ end }}
    <h4>OQC - OASIS Quorum Calculator</h4>
  </header>
  <main>
{{ end -}}
{{- define "footer" }}
  </main>
  <footer>
    <p>OQC at <a href="https://github.com/csaf-auxiliary/oasis-quorum-calculator">GitHub</a></p>
  </footer>
</body>
</html>
{{- end -}}

{{ define "error" -}}
{{ if .Error -}}
<p class="notice"><strong>Error:</strong> {{ .Error }}</p>
{{ end }}
{{- end -}}

{{ define "committees_table_header" -}}
<thead>
<th>Committee</th>
<th>Chair</th>
<th>Member</th>
<th> Non-Voting<br>Member </th>
<th> Voting<br>Member </th>
<th> Persistent<br>Non-Voting<br>Member </th>
</thead>
{{- end -}}

{{ define "committees" -}}
{{ if .Memberships }}
{{ $member := Role "member" }}
{{ $chair  := Role "chair" }}
{{ $statusMember     := MemberStatus "member" }}
{{ $statusVoting     := MemberStatus "voting" }}
{{ $statusNoneVoting := MemberStatus "nonevoting" }}
<table>
  {{ template "committees_table_header" }}
  <tbody>
  {{ range .Memberships }}
  <tr>
    <td>{{ .Committee.Name }}</td>
    <td>{{ if .HasRole $chair   }}&check;{{ end }}</td>
    <td>{{ if .HasRole $member  }}&check;{{ end }}</td>
    <td>{{ if and (.HasRole $member) (eq .Status $statusMember) }}&check;{{ end }}</td>
    <td>{{ if and (.HasRole $member) (eq .Status $statusVoting) }}&check;{{ end }}</td>
    <td>{{ if and (.HasRole $member) (eq .Status $statusNoneVoting) }}&check;{{ end }}</td>
  <tr>
  {{ end }}
  </tbody>
</table>
{{ end }}
{{- end -}}

{{ define "user_committees" -}}
{{ $user := .User }}
{{ $committees := .Committees }}
{{ if $committees }}
{{ $member := Role "member" }}
{{ $chair  := Role "chair" }}
{{ $statusMember     := MemberStatus "member" }}
{{ $statusVoting     := MemberStatus "voting" }}
{{ $statusNoneVoting := MemberStatus "nonevoting" }}
<table>
  {{ template "committees_table_header" }}
  <tbody>
  {{ range $committees }}
  <tr>
    <td>{{ .Name }}</td>
    {{ $ms := $user.FindMembership .Name }}
    {{ $isChair  := $ms.HasRole $chair }}
    {{ $isMember := $ms.HasRole $member }}
    {{ if $ms }}
    <td>
      <input type="checkbox"
             name="role_committee"
             value="chair{{ .ID }}"
             {{ if $isChair }}checked{{ end }}>
    </td>
    <td>
      <input type="checkbox"
             name="role_committee"
             value="member{{ .ID }}"
             {{ if $isMember }}checked{{ end }}>
    </td>
    <td>
      <input type="radio"
             name="status{{ .ID }}"
             value="member"
             {{ if and $isMember (eq $ms.Status $statusMember) }}checked{{ end }}>
    </td>
    <td>
      <input type="radio"
             name="status{{ .ID }}"
             value="voting"
             {{ if and $isMember (eq $ms.Status $statusVoting) }}checked{{ end }}>
    </td>
    <td>
      <input type="radio"
             name="status{{ .ID }}"
             value="nonevoting"
             {{ if and $isMember (eq $ms.Status $statusNoneVoting) }}checked{{ end }}>
    </td>
    {{ else }}
    <td><input name="role_committee" type="checkbox" value="chair{{ .ID }}"></td>
    <td><input name="role_committee" type="checkbox" value="member{{ .ID }}"></td>
    <td>
      <input type="radio" name="status{{ .ID }}" value="member">
    </td>
    <td>
      <input type="radio" name="status{{ .ID }}" value="voting">
    </td>
    <td>
      <input type="radio" name="status{{ .ID }}" value="nonevoting">
    </td>
    {{ end }}
  <tr>
  {{ end }}
  </tbody>
</table>
{{ end }}
{{- end -}}

{{- define "meeting" -}}
{{ $concluded := eq .Status (MeetingStatus "concluded") }}

<label id="start_time_label" for="start_time_input">
  Start time (Local):
</label>
<input
  type="datetime-local"
  id="start_time_input"
  {{ if not .StartTime.IsZero }}
    value="{{ .StartTime.Local.Format "2006-01-02T15:04" }}"
  {{ end }}
  {{ if $concluded }}disabled{{ end }}
  required>

<!-- this hidden field is what actually gets submitted -->
<input
  type="hidden"
  name="start_time"
  id="start_time_hidden">

<button
  type="button"
  id="toggle_mode_btn"
  {{ if $concluded }}disabled{{ end }}>
  Switch to UTC
</button>
<br><br>

<label for="duration">Duration:</label>
<input type="input"
       name="duration"
       id="duration"
       value="{{ if .Duration }}{{ HoursMinutes .Duration }}{{ end }}"
       {{ if $concluded }}disabled{{ end }}
       required><br>
<label for="checkbox">Gathering:</label>

<input type="checkbox"
       name="gathering"
       id="gathering"
       value="gathering"
       {{ if .Gathering }}checked{{ end }}
       {{ if $concluded }}disabled{{ end }}>
<br>
<label for="description">Description:</label>
<textarea name="description"
       {{ if $concluded }}disabled{{ end }}>{{ if .Description }}{{ .Description }}{{ end }}</textarea>

<script>
;(function(){
  const label     = document.getElementById('start_time_label');
  const picker    = document.getElementById('start_time_input');
  const hidden    = document.getElementById('start_time_hidden');
  const toggleBtn = document.getElementById('toggle_mode_btn');
  // default date depiction
  let mode = 'local';

  // converts single digit numbers X to 0X to match time format
  function pad(n){
    return n.toString().padStart(2,'0');
  }

  // Click toggle button
  toggleBtn.addEventListener('click', () => {
    // If not time was set, only switch buttons and return
    if (!picker.value) {
      if (mode === 'local') {
        mode = 'utc';
        label.textContent = 'Start time (UTC):';
        toggleBtn.textContent = 'Switch to Local';
      } else {
        mode = 'local';
        label.textContent = 'Start time (Local):';
        toggleBtn.textContent = 'Switch to UTC';
      }
      return;
    }
    // If time was set, convert from local to UTC or vice-versa and switch buttons
    let year, month, day, hour, minute;

    if (mode === 'local') {
      // take the local-time in picker, show its UTC fields
      const date = new Date(picker.value);
      year   = date.getUTCFullYear();
      month  = pad(date.getUTCMonth() + 1);
      day    = pad(date.getUTCDate());
      hour   = pad(date.getUTCHours());
      minute = pad(date.getUTCMinutes());
      picker.value = `${year}-${month}-${day}T${hour}:${minute}`;
      mode = 'utc';
      label.textContent = 'Start time (UTC):';
      toggleBtn.textContent = 'Switch to Local';
    } else {
      // take the UTC fields in picker, show its local-time fields
      const parts = picker.value.split(/[-T:]/);
      const date = new Date(Date.UTC(
        +parts[0], +parts[1]-1, +parts[2], +parts[3], +parts[4]
      ));
      year   = date.getFullYear();
      month  = pad(date.getMonth() + 1);
      day    = pad(date.getDate());
      hour   = pad(date.getHours());
      minute = pad(date.getMinutes());
      picker.value = `${year}-${month}-${day}T${hour}:${minute}`;
      mode = 'local';
      label.textContent = 'Start time (Local):';
      toggleBtn.textContent = 'Switch to UTC';
    }
  });

  // on submit, always write ISO UTC into the hidden field that is submitted
  document.querySelector('form').addEventListener('submit', () => {
    if (!picker.value) {
      hidden.value = '';
      return;
    }
    let date;
    if (mode === 'local') {
      date = new Date(picker.value);
    } else {
      const p = picker.value.split(/[-T:]/);
      date = new Date(Date.UTC(+p[0], +p[1]-1, +p[2], +p[3], +p[4]));
    }
    // convert back to UTC
    hidden.value = date.toISOString().slice(0,16);
  });
})();
</script>
{{- end -}}
